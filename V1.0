-- Loading the ESP Script
local espDrawings = {}
local espEnabled = true -- Toggle variable for ESP visibility
local auraRadius = 350 -- Aura radius in studs

-- Function to create ESP for a player
local function createESPForPlayer(player)
    if player == game.Players.LocalPlayer then return end

    local topLine = Drawing.new("Line")
    local bottomLine = Drawing.new("Line")
    local leftLine = Drawing.new("Line")
    local rightLine = Drawing.new("Line")

    espDrawings[player] = {topLine, bottomLine, leftLine, rightLine}

    -- Static white color function
    local function getWhiteColor()
        return Color3.fromRGB(255, 255, 255) -- White color
    end

    -- Render ESP lines
    game:GetService("RunService").RenderStepped:Connect(function()
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            for _, drawing in pairs(espDrawings[player] or {}) do
                drawing.Visible = false
            end
            return
        end

        local character = player.Character
        local hrp = character:FindFirstChild("HumanoidRootPart")
        local localPlayerHRP = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        
        if hrp and localPlayerHRP then
            local distance = (hrp.Position - localPlayerHRP.Position).Magnitude
            if distance <= auraRadius then
                local camera = workspace.CurrentCamera
                local hrpPosition = hrp.Position
                local screenPos, onScreen = camera:WorldToViewportPoint(hrpPosition)

                if onScreen and espEnabled then
                    local size = Vector3.new(2, 3, 0) * (character.Head.Size.Y)
                    local topLeft = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(size.X, size.Y, 0)).p)
                    local topRight = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(-size.X, size.Y, 0)).p)
                    local bottomLeft = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(size.X, -size.Y, 0)).p)
                    local bottomRight = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(-size.X, -size.Y, 0)).p)

                    topLine.From = Vector2.new(topLeft.X, topLeft.Y)
                    topLine.To = Vector2.new(topRight.X, topRight.Y)
                    bottomLine.From = Vector2.new(bottomLeft.X, bottomLeft.Y)
                    bottomLine.To = Vector2.new(bottomRight.X, bottomRight.Y)
                    leftLine.From = Vector2.new(topLeft.X, topLeft.Y)
                    leftLine.To = Vector2.new(bottomLeft.X, bottomLeft.Y)
                    rightLine.From = Vector2.new(topRight.X, topRight.Y)
                    rightLine.To = Vector2.new(bottomRight.X, bottomRight.Y)

                    -- Set the color of the lines to white
                    local whiteColor = getWhiteColor()
                    for _, line in pairs({topLine, bottomLine, leftLine, rightLine}) do
                        line.Color = whiteColor
                        line.Thickness = 2
                        line.Transparency = 1
                        line.Visible = true
                    end
                else
                    for _, line in pairs({topLine, bottomLine, leftLine, rightLine}) do
                        line.Visible = false
                    end
                end
            else
                -- Hide ESP if the player is outside the radius
                for _, line in pairs({topLine, bottomLine, leftLine, rightLine}) do
                    line.Visible = false
                end
            end
        end
    end)
end

-- Listen for the chat command "!loadesp" and enable ESP
game.Players.LocalPlayer.Chatted:Connect(function(message)
    if message:lower() == "!loadesp" then
        -- Enable the ESP functionality
        print("ESP loaded!")

        -- Add ESP for all current players and future players
        for _, player in pairs(game.Players:GetPlayers()) do
            createESPForPlayer(player)
        end
        game.Players.PlayerAdded:Connect(createESPForPlayer)

        -- Notification to the player that ESP was loaded
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "ESP Activated",
            Text = "ESP has been loaded successfully.",
            Duration = 3
        })
    end
end)



-- Don't call loadCamLock immediately. Wait for the chat command.

-- The function to handle loading the camlock script
local function loadCamLock()
    getgenv().OldAimPart = "Head"
    getgenv().AimPart = "Head" -- For R15 Games: {UpperTorso, LowerTorso, HumanoidRootPart, Head} | For R6 Games: {Head, Torso, HumanoidRootPart}  
    getgenv().AimlockKey = "z"
    getgenv().AimRadius = 1000 -- How far away from someone's character you want to lock on at
    getgenv().ThirdPerson = true 
    getgenv().FirstPerson = true
    getgenv().TeamCheck = false -- Check if Target is on your Team (True means it won't lock onto your teammates, false is vice versa) (Set it to false if there are no teams)
    getgenv().PredictMovement = true -- Predicts if they are moving in fast velocity (like jumping) so the aimbot will go a bit faster to match their speed 
    getgenv().PredictionVelocity = 18.3
    getgenv().CheckIfJumped = true
    getgenv().Smoothness = false
    getgenv().SmoothnessAmount = 0.7

    local Players, Uis, RService, SGui = game:GetService"Players", game:GetService"UserInputService", game:GetService"RunService", game:GetService"StarterGui";
    local Client, Mouse, Camera, CF, RNew, Vec3, Vec2 = Players.LocalPlayer, Players.LocalPlayer:GetMouse(), workspace.CurrentCamera, CFrame.new, Ray.new, Vector3.new, Vector2.new;
    local Aimlock, MousePressed, CanNotify = true, false, false;
    local AimlockTarget;
    local OldPre;

    -- The functions and logic for the camlock system
    getgenv().WorldToViewportPoint = function(P)
        return Camera:WorldToViewportPoint(P)
    end

    getgenv().WorldToScreenPoint = function(P)
        return Camera.WorldToScreenPoint(Camera, P)
    end

    getgenv().GetObscuringObjects = function(T)
        if T and T:FindFirstChild(getgenv().AimPart) and Client and Client.Character:FindFirstChild("Head") then 
            local RayPos = workspace:FindPartOnRay(RNew(
                T[getgenv().AimPart].Position, Client.Character.Head.Position)
            )
            if RayPos then return RayPos:IsDescendantOf(T) end
        end
    end

    getgenv().GetNearestTarget = function()
        local players = {}
        local PLAYER_HOLD  = {}
        local DISTANCES = {}
        for i, v in pairs(Players:GetPlayers()) do
            if v ~= Client then
                table.insert(players, v)
            end
        end
        for i, v in pairs(players) do
            if v.Character ~= nil then
                local AIM = v.Character:FindFirstChild("Head")
                if getgenv().TeamCheck == true and v.Team ~= Client.Team then
                    local DISTANCE = (v.Character:FindFirstChild("Head").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                    local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
                    local HIT,POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                    local DIFF = math.floor((POS - AIM.Position).magnitude)
                    PLAYER_HOLD[v.Name .. i] = {}
                    PLAYER_HOLD[v.Name .. i].dist= DISTANCE
                    PLAYER_HOLD[v.Name .. i].plr = v
                    PLAYER_HOLD[v.Name .. i].diff = DIFF
                    table.insert(DISTANCES, DIFF)
                elseif getgenv().TeamCheck == false and v.Team == Client.Team then 
                    local DISTANCE = (v.Character:FindFirstChild("Head").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                    local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
                    local HIT,POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                    local DIFF = math.floor((POS - AIM.Position).magnitude)
                    PLAYER_HOLD[v.Name .. i] = {}
                    PLAYER_HOLD[v.Name .. i].dist= DISTANCE
                    PLAYER_HOLD[v.Name .. i].plr = v
                    PLAYER_HOLD[v.Name .. i].diff = DIFF
                    table.insert(DISTANCES, DIFF)
                end
            end
        end
        
        if unpack(DISTANCES) == nil then
            return nil
        end
        
        local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
        if L_DISTANCE > getgenv().AimRadius then
            return nil
        end
        
        for i, v in pairs(PLAYER_HOLD) do
            if v.diff == L_DISTANCE then
                return v.plr
            end
        end
        return nil
    end

    Mouse.KeyDown:Connect(function(a)
        if not (Uis:GetFocusedTextBox()) then 
            if a == AimlockKey and AimlockTarget == nil then
                pcall(function()
                    if MousePressed ~= true then MousePressed = true end 
                    local Target;Target = GetNearestTarget()
                    if Target ~= nil then 
                        AimlockTarget = Target
                    end
                end)
            elseif a == AimlockKey and AimlockTarget ~= nil then
                if AimlockTarget ~= nil then AimlockTarget = nil end
                if MousePressed ~= false then 
                    MousePressed = false 
                end
            end
        end
    end)
    
    RService.RenderStepped:Connect(function()
        if getgenv().ThirdPerson == true and getgenv().FirstPerson == true then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1 or (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        elseif getgenv().ThirdPerson == true and getgenv().FirstPerson == false then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        elseif getgenv().ThirdPerson == false and getgenv().FirstPerson == true then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        end
        if Aimlock == true and MousePressed == true then 
            if AimlockTarget and AimlockTarget.Character and AimlockTarget.Character:FindFirstChild(getgenv().AimPart) then 
                if getgenv().FirstPerson == true then
                    if CanNotify == true then
                        if getgenv().PredictMovement == true then
                            if getgenv().Smoothness == true then
                                --// The part we're going to lerp/smoothen \\--
                                local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity)
                                  
                                --// Making it work \\--
                                Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
                            else
                                Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity)
                            end
                        elseif getgenv().PredictMovement == false then 
                            if getgenv().Smoothness == true then
                                --// The part we're going to lerp/smoothen \\--
                                local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)

                                --// Making it work \\--
                                Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
                            else
                                Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)
                            end
                        end
                    end
                end
            end
        end
    end)

    -- Send a notification after camlock is loaded
    SGui:SetCore("SendNotification", {
        Title = "Camlock Activated",
        Text = "Camlock has been successfully loaded and is ready to use.",
        Duration = 5
    })
end

-- Listen for the chat command "!loadcamlock"
game.Players.LocalPlayer.Chatted:Connect(function(message)
    if message:lower() == "!loadcamlock" then
        loadCamLock()  -- Call the function only when the chat command is triggered
        print("Camlock loaded!")
    end
end)



-- FPS Booster Script
local fpsBoosterEnabled = false -- Toggle variable for FPS Booster

local function optimizePerformance()
    if fpsBoosterEnabled then return end
    fpsBoosterEnabled = true

    -- Remove all particles
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Fire") or obj:IsA("Smoke") or obj:IsA("Sparkles") then
            obj.Enabled = false
        end
    end

    -- Remove terrain decoration
    if workspace:FindFirstChildOfClass("Terrain") then
        workspace.Terrain.WaterWaveSize = 0
        workspace.Terrain.WaterWaveSpeed = 0
        workspace.Terrain.WaterReflectance = 0
        workspace.Terrain.WaterTransparency = 1
    end

    -- Lower graphics settings
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01

    -- Disable shadows
    game.Lighting.GlobalShadows = false
    game.Lighting.FogEnd = 9e9

    -- Optimize lighting
    for _, light in ipairs(game.Lighting:GetDescendants()) do
        if light:IsA("PostEffect") then
            light.Enabled = false
        end
    end

    -- Set material to plastic
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("BasePart") then
            obj.Material = Enum.Material.Plastic
        end
    end

    -- Notification
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "FPS Booster",
        Text = "FPS Booster is now active. Performance optimized!",
        Duration = 5
    })
end

local function resetPerformance()
    if not fpsBoosterEnabled then return end
    fpsBoosterEnabled = false

    -- Re-enable graphical effects
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Fire") or obj:IsA("Smoke") or obj:IsA("Sparkles") then
            obj.Enabled = true
        end
    end

    -- Restore terrain decoration
    if workspace:FindFirstChildOfClass("Terrain") then
        workspace.Terrain.WaterWaveSize = 0.25
        workspace.Terrain.WaterWaveSpeed = 10
        workspace.Terrain.WaterReflectance = 0.5
        workspace.Terrain.WaterTransparency = 0.5
    end

    -- Restore graphics settings
    settings().Rendering.QualityLevel = Enum.QualityLevel.Automatic

    -- Re-enable shadows
    game.Lighting.GlobalShadows = true
    game.Lighting.FogEnd = 100000

    -- Restore lighting effects
    for _, light in ipairs(game.Lighting:GetDescendants()) do
        if light:IsA("PostEffect") then
            light.Enabled = true
        end
    end

    -- Notification
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "FPS Booster",
        Text = "FPS Booster has been turned off. Graphics restored.",
        Duration = 5
    })
end

-- Chat commands to toggle FPS Booster
game.Players.LocalPlayer.Chatted:Connect(function(message)
    if message:lower() == "!fpsboost" then
        optimizePerformance()
    elseif message:lower() == "!resetfps" then
        resetPerformance()
    end
end)
